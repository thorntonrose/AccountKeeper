package org.accountkeeper;

import java.io.*;
import java.text.*;
import java.util.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.*;
import javax.swing.event.*;
import javax.swing.table.*;
import javax.swing.text.*;
import org.javacogs.*;

/**
 * This is the main class of the Account Keeper application. It uses Swing and
 * the Java look and feel. The static entry point is <code>main</code>.
 * <br><br>
 * The UI for this application was generated by JBuilder. Any class that has UI
 * components will have a method called <code>jbInit</code> that initializes the UI.
 * Additionally, any section of the code that has been generated by JBuilder will be
 * marked with [JBuilder].
 *
 * @author Thornton Rose
 * @version 1.0
 */
public class AccountKeeper extends JFrame {
   // Private constants

   private static final String TITLE   = "Account Keeper";
   private static final String VERSION = "1.0";

   // Private instance variables

   private AccountList       acctList;        // List of Accounts.
   private AccountTableModel acctTableModel;  // Model used to view account list via JTable.
   private AccountForm       acctForm;        // Form for adding/editing accounts.

   // UI components [JBuilder]

   private BorderLayout    mainBorderLayout    = new BorderLayout();
   private SoftBevelBorder tableBorder         = new SoftBevelBorder(BevelBorder.LOWERED);
   private SoftBevelBorder controlPanelBorder  = new SoftBevelBorder(BevelBorder.LOWERED);
   private JPanel          contentPanel        = new JPanel();
   private JScrollPane     tableScrollPane     = new JScrollPane();
   private AccountTable    acctTable           = new AccountTable();
   private JPanel          controlPanel        = new JPanel();
   private CardLayout      controlCardLayout   = new CardLayout();
   private JPanel          controlInnerPanel   = new JPanel();
   private BorderLayout    controlBorderLayout = new BorderLayout();
   private CardLayout      contentCardLayout   = new CardLayout();
   private JPanel          buttonPanel1        = new JPanel();
   private JPanel          buttonPanel2        = new JPanel();
   private GridLayout      buttonGridLayout1   = new GridLayout();
   private GridLayout      buttonGridLayout2   = new GridLayout();
   private JButton         addButton           = new JButton();
   private JButton         editButton          = new JButton();
   private JButton         deleteButton        = new JButton();
   private JButton         aboutButton         = new JButton();

   //------------------------------------------------------------------------------------

   /**
    * Construct a new instance of the class.
    */
   public AccountKeeper() {
      Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();

      // Initialize UI components and position frame on screen (centered horizontally;
      // just above center vertically).

      jbInit();
      setLocation(
         (screenSize.width - getSize().width) / 2,
         ((screenSize.height - getSize().height) / 2) - 20);

      // Initialize account list, model, and table.

      try {
         acctList = new AccountList();
         acctTableModel = new AccountTableModel();
         acctTableModel.setAccountList(acctList);
         acctTable.setModel(acctTableModel);
      } catch(Exception ex) {
         JOptionPane.showMessageDialog(
            this,
            "Error initializing account list.\n" + ex,
            "Exception",
            JOptionPane.WARNING_MESSAGE);
      }

      // Add listeners to various components.

      addListeners();
   }

   //------------------------------------------------------------------------------------

   /**
    * Initialize UI [JBuilder].
    */
   private void jbInit() {
      this.setTitle(TITLE);
      this.setSize(new Dimension(300, 320));
      this.getContentPane().setLayout(mainBorderLayout);
      this.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);

      this.getContentPane().add(contentPanel, BorderLayout.CENTER);
      this.getContentPane().add(controlPanel, BorderLayout.SOUTH);

      contentCardLayout.setHgap(2);
      contentCardLayout.setVgap(0);

      contentPanel.setLayout(contentCardLayout);
      contentPanel.add(tableScrollPane, "");

      tableScrollPane.setBorder(tableBorder);
      tableScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
      tableScrollPane.getViewport().add(acctTable, null);

      acctTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

      controlCardLayout.setHgap(2);
      controlCardLayout.setVgap(2);

      controlPanel.setLayout(controlCardLayout);
      controlPanel.add(controlInnerPanel, "card1");

      controlInnerPanel.setLayout(controlBorderLayout);
      controlInnerPanel.add(buttonPanel1, BorderLayout.WEST);
      controlInnerPanel.add(buttonPanel2, BorderLayout.EAST);

      buttonGridLayout1.setColumns(3);
      buttonGridLayout1.setHgap(2);

      buttonPanel1.setMaximumSize(new Dimension(110, 23));
      buttonPanel1.setMinimumSize(new Dimension(110, 23));
      buttonPanel1.setPreferredSize(new Dimension(110, 23));
      buttonPanel1.setLayout(buttonGridLayout1);
      buttonPanel1.add(addButton, null);
      buttonPanel1.add(editButton, null);
      buttonPanel1.add(deleteButton, null);

      addButton.setMargin(new Insets(0, 0, 0, 0));
      addButton.setText("Add");
      // addButton.setToolTipText("Add");

      editButton.setMargin(new Insets(0, 0, 0, 0));
      editButton.setText("Edit");
      editButton.setEnabled(false);
      // editButton.setToolTipText("Edit");

      deleteButton.setMargin(new Insets(0, 0, 0, 0));
      deleteButton.setText("Del");
      deleteButton.setEnabled(false);
      // deleteButton.setToolTipText("Delete");

      buttonGridLayout2.setColumns(1);
      buttonGridLayout2.setHgap(2);

      buttonPanel2.setMaximumSize(new Dimension(25, 23));
      buttonPanel2.setMinimumSize(new Dimension(25, 23));
      buttonPanel2.setPreferredSize(new Dimension(25, 23));
      buttonPanel2.setLayout(buttonGridLayout2);
      buttonPanel2.add(aboutButton, null);

      aboutButton.setMargin(new Insets(0, 0, 0, 0));
      aboutButton.setText("(i)");
      aboutButton.setToolTipText("About");
   }

   /**
    * Add listeners to any components that need to be observed. These include, but are
    * not limited to: the window, the table, buttons, menu items.
    */
   private void addListeners() {
      // Add window listener to check for window closing and to exit when the window
      // has closed.

      addWindowListener(new WindowAdapter() {
         public void windowClosing(WindowEvent event) {
            dispose();
         }

         public void windowClosed(WindowEvent event) {
            System.exit(0);
         }
      });

      // Add listener for Add button.

      addButton.addActionListener(new ActionListener() {
         public void actionPerformed(ActionEvent event) {
            addAccount();
         }
      });

      // Add listener for Edit button.

      editButton.addActionListener(new ActionListener() {
         public void actionPerformed(ActionEvent event) {
            editAccount();
         }
      });

      // Add listener for Delete button.

      deleteButton.addActionListener(new ActionListener() {
         public void actionPerformed(ActionEvent event) {
            deleteAccount();
         }
      });

      // Add listener for About button.

      aboutButton.addActionListener(new ActionListener() {
         public void actionPerformed(ActionEvent event) {
            showAbout();
         }
      });

      // Add listener to journal table to edit entry on double-click.

      acctTable.addMouseListener(new MouseAdapter() {
         public void mouseClicked(MouseEvent event) {
            if (event.getClickCount() == 2) {
               editAccount();
            }
         }
      });

      // Add listener to journal table selection model to show (enable/disable)
      // controls as appropriate when an entry is selected.

      acctTable.getSelectionModel().addListSelectionListener(
         new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent event) {
               if (! event.getValueIsAdjusting()) {
                  showControls();
               }
            }
         }
      );
   }

   /**
    * Show application identification and copyright information.
    */
   private void showAbout() {
      MessageDialog.show(
         this,
         "About",
         TITLE + " v" + VERSION +
            "\n\nDeveloped by Thornton Rose" +
            "\nCopyright 2000");
   }

   /**
    * Show (enable/disable) the controls based on the state of the account list.
    * In particular, if a row is selected in the list, the Edit and Delete buttons
    * are enabled.
    */
   private void showControls() {
      boolean rowIsSelected = (acctTable.getSelectedRow() >= 0);

      editButton.setEnabled(rowIsSelected);
      deleteButton.setEnabled(rowIsSelected);
   }

   //------------------------------------------------------------------------------------

   /**
    * Get the journal entry form, which is used for entering/editing the given journal
    * entry. Note that if the form is null, it is created.
    *
    * @return Journal entry form.
    */
   private AccountForm getAccountForm() {
      // If the entry form has not been created, create it.

      if (acctForm == null) {
         acctForm  = new AccountForm(this);
      }

      // Return the entry form.

      return acctForm;
   }

   /**
    * Add a journal entry. The user is presented with the Log Entry Form, where he can
    * enter journal entry information and select Save or Cancel. If the user selects
    * Save, the entry is added.
    */
   private void addAccount() {
      Account entry = new Account();
      int          result;

      // Present the entry form and wait for the user to complete it.

      result = getAccountForm().show(entry);

      // If the user saved the entry, update the table model.

      if (result == AccountForm.RESULT_SAVE) {
         acctTableModel.addRow(entry);
         save();
      }
   }

   /**
    * Edit the journal entry that is selected in the journal table. The user is
    * presented with the journal entry form, where he can enter journal entry
    * and select Save or Cancel. If the user selects Save, the journal entry will
    * be updated.
    * <br><br>
    * Note that the journal entry is cloned before it is passed to the entry form, so
    * that it can be discarded if the user cancels his changes. If the user saves his
    * changes, the entry in the journal is replaced with the updated entry.
    */
   private void editAccount() {
      int          selectedRow;
      Account origEntry;
      Account entry;
      int          result;

      // Get the selected row index.

      selectedRow = acctTable.getSelectedRow();

      // If a row is selected, edit the journal entry at that row.

      if (selectedRow >= 0) {
         // Get the journal entry and clone it.

         origEntry = acctTableModel.getAccount(selectedRow);
         entry = (Account) origEntry.clone();

         // Present the cloned journal entry in the log entry form and wait for the
         // user to complete the edit.

         result = getAccountForm().show(entry);

         // If the user saved changes, update the table model.

         if (result == AccountForm.RESULT_SAVE) {
            acctTableModel.updateRow(acctTable.getSelectedRow(), entry);
            save();
         }
      }
   }

   /**
    * Delete the journal entry that is selected in the log table, after confirmation.
    * The user is presented with a simple yes/no dialog to confirm deletion. If the
    * user selects Yes, the selected journal entry is deleted.
    */
   private void deleteAccount() {
      int selectedRow;
      int answer;

      // Get the selected row index.

      selectedRow = acctTable.getSelectedRow();

      // If a row is selected, confirm deletion.

      if (selectedRow >= 0) {
         // Present confirmation dialog.

         /*
         answer = ConfirmDialog.show(
            this,
            "Delete the selected account?");
         */
         answer = JOptionPane.showConfirmDialog(
            this,
            "Delete the selected account?",
            "Confirmation",
            JOptionPane.YES_NO_OPTION);

         // If the user answered yes, delete the selected journal entry.

         if (answer == JOptionPane.YES_OPTION) {
            acctTableModel.removeRow(acctTable.getSelectedRow());
            save();
         }
      }
   }

   /**
    * Save the account list.
    */
   private void save() {
      try {
         acctList.save();
      } catch(Exception ex) {
         // ExceptionDialog.show(this, "Cannot save account file.", ex);
         JOptionPane.showMessageDialog(
            this,
            "Cannot save account file.\n" + ex,
            "Exception",
            JOptionPane.WARNING_MESSAGE);
      }
   }

   //------------------------------------------------------------------------------------

   /**
    * Start the application.
    */
   public static void main(String[] args) {
      // try {
         AccountKeeper app = new AccountKeeper();
         app.show();
      // } catch(Exception ex) {
      //    System.out.println(ex);
      // }
   }
}
